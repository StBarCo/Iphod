#!/usr/bin/env bash

APP="iphod"
DROPLET="68.183.19.169"

BUILD_HOST=$DROPLET
BUILD_USER="frpaulas"
BUILD_AT="/tmp/edeliver/$APP/builds"
RELEASE_STORE="/tmp/edeliver/$APP/builds/_build/prod/rel/$APP"

START_DEPLOY=true
CLEAN_DEPLOY=true

GIT_CLEAN_PATHS="_build rel priv/static"

# STAGING_HOSTS="68.183.19.169"
# STAGING_USER="frpaulas"
# DELIVER_TO="/home/frpaulas/legereme.com"

# TEST_AT="/home/frpaulas/iphod_stage"

PRODUCTION_HOSTS="legereme.com"
PRODUCTION_USER="frpaulas"
DELIVER_TO="/home/frpaulas/Iphod"

# For *phoneix* projects, symlink prod.secret.exs to our tmp source

pre_erlang_get_and_update_deps() {
  local _prod_secret_path="/var/iphod/prod.secret.exs"
  if [ "$TARGET_MIX_ENV" = "prod" ]; then
    __sync_remote "
      ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'
    "
  fi
}

pre_erlang_clean_compile() {
  status "Running npm install"
    __sync_remote "
      [ -f ~/.profile ] && source ~/.profile
      set -e
      cd '$BUILD_AT'/assets
      npm install
    "

  status "Compiling assets"
    __sync_remote "
      [ -f ~/.profile ] && source ~/.profile
      set -e
      cd '$BUILD_AT'/assets
      node_modules/.bin/webpack --mode production
    "

  status "Running phoenix.digest" # log output prepended with "----->"
  __sync_remote " # runs the commands on the build host
    [ -f ~/.profile ] && source ~/.profile # load profile (optional)
    set -e # fail if any command fails (recommended)
    cd '$BUILD_AT' # enter the build directory on the build host (required)
    # prepare something
    mkdir -p priv/static # required by the phoenix.digest task
    # run your custom task
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest $SILENCE
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest.clean $SILENCE
  "
}
