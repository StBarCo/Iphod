var _user$project$Resources$rowStyle = function (model) {
	return A2(
		_user$project$Iphod_Helper$hideable,
		model.show,
		{ctor: '[]'});
};
var _user$project$Resources$add_elipse = F2(
	function (n, s) {
		var new_s = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(s),
			n) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, n, s),
			' ...') : s;
		return new_s;
	});
var _user$project$Resources$printOrLink = function (resource) {
	var _p0 = resource.of_type;
	switch (_p0) {
		case 'link':
			return 'New tab';
		case 'print':
			return 'Download';
		case 'insert':
			return 'Download';
		default:
			return 'View';
	}
};
var _user$project$Resources$getResource = function (resource) {
	var _p1 = resource.of_type;
	switch (_p1) {
		case 'link':
			return A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(resource.url),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$target('_blank'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_user$project$Resources$printOrLink(resource)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		case 'print':
			return A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(
						A2(_elm_lang$core$Basics_ops['++'], '/resources/send/', resource.url)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$target('_blank'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_user$project$Resources$printOrLink(resource)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		case 'insert':
			return A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(
						A2(_elm_lang$core$Basics_ops['++'], '/resources/send/', resource.url)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$target('_blank'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_user$project$Resources$printOrLink(resource)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('#humor-text'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('View'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('humor-text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('humorModalDialog'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#closeconfig-text'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$title('Close'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('close'),
														_1: {ctor: '[]'}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('X'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$h2,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('modal_header'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Get it?'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(resource.name),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_evancz$elm_markdown$Markdown$toHtml,
																{ctor: '[]'},
																resource.description),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
	}
};
var _user$project$Resources$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'AddModel':
				var _p3 = _p2._0;
				var foo = A2(_elm_lang$core$Debug$log, 'Add Model', _p3);
				return {ctor: '_Tuple2', _0: _p3, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Find':
				var _p6 = _p2._1;
				var _p5 = _p2._0;
				var findThis = function (resc) {
					var _p4 = _p5;
					switch (_p4) {
						case 'name':
							return A2(
								_elm_lang$core$Regex$contains,
								_elm_lang$core$Regex$caseInsensitive(
									_elm_lang$core$Regex$regex(_p6)),
								resc.name) ? _elm_lang$core$Native_Utils.update(
								resc,
								{show: true}) : _elm_lang$core$Native_Utils.update(
								resc,
								{show: false});
						case 'description':
							return A2(
								_elm_lang$core$Regex$contains,
								_elm_lang$core$Regex$caseInsensitive(
									_elm_lang$core$Regex$regex(_p6)),
								resc.description) ? _elm_lang$core$Native_Utils.update(
								resc,
								{show: true}) : _elm_lang$core$Native_Utils.update(
								resc,
								{show: false});
						default:
							return A2(
								_elm_lang$core$Regex$contains,
								_elm_lang$core$Regex$caseInsensitive(
									_elm_lang$core$Regex$regex(_p6)),
								resc.keys) ? _elm_lang$core$Native_Utils.update(
								resc,
								{show: true}) : _elm_lang$core$Native_Utils.update(
								resc,
								{show: false});
					}
				};
				var foo = A2(
					_elm_lang$core$Debug$log,
					'FIND',
					{ctor: '_Tuple2', _0: _p5, _1: _p6});
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$List$map, findThis, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Resources$init = {
	ctor: '_Tuple2',
	_0: {ctor: '[]'},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Resources$allResources = _elm_lang$core$Native_Platform.incomingPort(
	'allResources',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (id) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (url) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							function (name) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									function (of_type) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											function (keys) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													function (description) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															function (show) {
																return _elm_lang$core$Json_Decode$succeed(
																	{id: id, url: url, name: name, of_type: of_type, keys: keys, description: description, show: show});
															},
															A2(_elm_lang$core$Json_Decode$field, 'show', _elm_lang$core$Json_Decode$bool));
													},
													A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
											},
											A2(_elm_lang$core$Json_Decode$field, 'keys', _elm_lang$core$Json_Decode$string));
									},
									A2(_elm_lang$core$Json_Decode$field, 'of_type', _elm_lang$core$Json_Decode$string));
							},
							A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
					},
					A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string));
			},
			A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string))));
var _user$project$Resources$ResourceGet = function (a) {
	return {ctor: 'ResourceGet', _0: a};
};
var _user$project$Resources$Find = F2(
	function (a, b) {
		return {ctor: 'Find', _0: a, _1: b};
	});
var _user$project$Resources$AddModel = function (a) {
	return {ctor: 'AddModel', _0: a};
};
var _user$project$Resources$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Resources$allResources(_user$project$Resources$AddModel),
			_1: {ctor: '[]'}
		});
};
var _user$project$Resources$NoOp = {ctor: 'NoOp'};
var _user$project$Resources$findName = A2(
	_elm_lang$html$Html$th,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('th_finders'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('find_name'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Resource Name'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$autofocus(true),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('find_name'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'keyup',
										A2(
											_elm_lang$core$Json_Decode$map,
											_user$project$Resources$Find('name'),
											_elm_lang$html$Html_Events$targetValue)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Resources$NoOp),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Resources$findDescription = A2(
	_elm_lang$html$Html$th,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('th_finders'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('find_desc'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Description'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$autofocus(true),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('find_desc'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'keyup',
										A2(
											_elm_lang$core$Json_Decode$map,
											_user$project$Resources$Find('description'),
											_elm_lang$html$Html_Events$targetValue)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Resources$NoOp),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Resources$findKeys = A2(
	_elm_lang$html$Html$th,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('th_finders'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('find_keys'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Key Words'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$autofocus(true),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('find_keys'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'keyup',
										A2(
											_elm_lang$core$Json_Decode$map,
											_user$project$Resources$Find('keys'),
											_elm_lang$html$Html_Events$targetValue)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Resources$NoOp),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Resources$view = function (model) {
	var this_resource = function (resc) {
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _user$project$Resources$rowStyle(resc),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tooltip'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tooltiptext'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(resc.name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_user$project$Resources$add_elipse, 20, resc.name)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tooltip'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('tooltiptext'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(resc.description),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_user$project$Resources$add_elipse, 20, resc.description)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tooltip'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tooltiptext'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(resc.keys),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_user$project$Resources$add_elipse, 20, resc.keys)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('resource_get'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Resources$getResource(resc),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Resources'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('resources'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('resource_name'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Name'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('resource_description'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Description'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('resource_keys'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Keys'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('resource_get'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _user$project$Resources$findName,
											_1: {
												ctor: '::',
												_0: _user$project$Resources$findDescription,
												_1: {
													ctor: '::',
													_0: _user$project$Resources$findKeys,
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, this_resource, model)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Resources$main = _elm_lang$html$Html$program(
	{init: _user$project$Resources$init, update: _user$project$Resources$update, view: _user$project$Resources$view, subscriptions: _user$project$Resources$subscriptions})();
