var _user$project$Translations$versionRow = function (model) {
	var this_style = {
		ctor: '::',
		_0: model.selected ? {ctor: '_Tuple2', _0: 'background-color', _1: 'lightgreen'} : {ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
		_1: {ctor: '[]'}
	};
	return A2(_user$project$Iphod_Helper$hideable, model.show, this_style);
};
var _user$project$Translations$init = {
	ctor: '_Tuple2',
	_0: {ctor: '[]'},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Translations$initVersion = {id: '', abbr: '', name: '', lang: '', show: false, selected: false};
var _user$project$Translations$updateVersions = _elm_lang$core$Native_Platform.outgoingPort(
	'updateVersions',
	function (v) {
		return {id: v.id, abbr: v.abbr, name: v.name, lang: v.lang, show: v.show, selected: v.selected};
	});
var _user$project$Translations$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'AddModel':
				return {ctor: '_Tuple2', _0: _p0._0, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Find':
				var _p2 = _p0._1;
				var findThis = function (ver) {
					var _p1 = _p0._0;
					switch (_p1) {
						case 'abbr':
							return A2(
								_elm_lang$core$Regex$contains,
								_elm_lang$core$Regex$caseInsensitive(
									_elm_lang$core$Regex$regex(_p2)),
								ver.abbr) ? _elm_lang$core$Native_Utils.update(
								ver,
								{show: true}) : _elm_lang$core$Native_Utils.update(
								ver,
								{show: false});
						case 'name':
							return A2(
								_elm_lang$core$Regex$contains,
								_elm_lang$core$Regex$caseInsensitive(
									_elm_lang$core$Regex$regex(_p2)),
								ver.name) ? _elm_lang$core$Native_Utils.update(
								ver,
								{show: true}) : _elm_lang$core$Native_Utils.update(
								ver,
								{show: false});
						default:
							return A2(
								_elm_lang$core$Regex$contains,
								_elm_lang$core$Regex$caseInsensitive(
									_elm_lang$core$Regex$regex(_p2)),
								ver.lang) ? _elm_lang$core$Native_Utils.update(
								ver,
								{show: true}) : _elm_lang$core$Native_Utils.update(
								ver,
								{show: false});
					}
				};
				var newModel = A2(_elm_lang$core$List$map, findThis, model);
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p3 = _p0._0;
				var newVer = _elm_lang$core$Native_Utils.update(
					_p3,
					{selected: !_p3.selected});
				var selectModel = function (this_model) {
					return _elm_lang$core$Native_Utils.eq(this_model.id, _p3.id) ? _elm_lang$core$Native_Utils.update(
						this_model,
						{selected: newVer.selected}) : this_model;
				};
				var newModel = A2(_elm_lang$core$List$map, selectModel, model);
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Translations$updateVersions(newVer)
				};
		}
	});
var _user$project$Translations$allVersions = _elm_lang$core$Native_Platform.incomingPort(
	'allVersions',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (id) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (abbr) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							function (name) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									function (lang) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											function (show) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													function (selected) {
														return _elm_lang$core$Json_Decode$succeed(
															{id: id, abbr: abbr, name: name, lang: lang, show: show, selected: selected});
													},
													A2(_elm_lang$core$Json_Decode$field, 'selected', _elm_lang$core$Json_Decode$bool));
											},
											A2(_elm_lang$core$Json_Decode$field, 'show', _elm_lang$core$Json_Decode$bool));
									},
									A2(_elm_lang$core$Json_Decode$field, 'lang', _elm_lang$core$Json_Decode$string));
							},
							A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
					},
					A2(_elm_lang$core$Json_Decode$field, 'abbr', _elm_lang$core$Json_Decode$string));
			},
			A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string))));
var _user$project$Translations$Version = F6(
	function (a, b, c, d, e, f) {
		return {id: a, abbr: b, name: c, lang: d, show: e, selected: f};
	});
var _user$project$Translations$UseVersion = function (a) {
	return {ctor: 'UseVersion', _0: a};
};
var _user$project$Translations$Find = F2(
	function (a, b) {
		return {ctor: 'Find', _0: a, _1: b};
	});
var _user$project$Translations$AddModel = function (a) {
	return {ctor: 'AddModel', _0: a};
};
var _user$project$Translations$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Translations$allVersions(_user$project$Translations$AddModel),
			_1: {ctor: '[]'}
		});
};
var _user$project$Translations$NoOp = {ctor: 'NoOp'};
var _user$project$Translations$findVersion = A2(
	_elm_lang$html$Html$th,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('find_version'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Version'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$autofocus(true),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('find_version'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'keyup',
										A2(
											_elm_lang$core$Json_Decode$map,
											_user$project$Translations$Find('abbr'),
											_elm_lang$html$Html_Events$targetValue)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Translations$NoOp),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Translations$findName = A2(
	_elm_lang$html$Html$th,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('find_name'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Version Name'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$autofocus(true),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('find_name'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'keyup',
										A2(
											_elm_lang$core$Json_Decode$map,
											_user$project$Translations$Find('name'),
											_elm_lang$html$Html_Events$targetValue)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Translations$NoOp),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Translations$findLanguage = A2(
	_elm_lang$html$Html$th,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('find_lang'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Language'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$autofocus(true),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('find_lang'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'keyup',
										A2(
											_elm_lang$core$Json_Decode$map,
											_user$project$Translations$Find('lang'),
											_elm_lang$html$Html_Events$targetValue)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Translations$NoOp),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '90%'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Translations$view = function (model) {
	var this_version = function (ver) {
		var using = ver.selected ? 'Using' : 'Use';
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _user$project$Translations$versionRow(ver),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('ver_abbr'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(ver.abbr),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('ver_name'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(ver.name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ver_language'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(ver.lang),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('ver_use'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Translations$UseVersion(ver)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(using),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Select Versions'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('versions'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('ver_abbr'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Version'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('ver_name'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Version Name'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('ver_language'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Language'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('ver_use'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Select'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _user$project$Translations$findVersion,
											_1: {
												ctor: '::',
												_0: _user$project$Translations$findName,
												_1: {
													ctor: '::',
													_0: _user$project$Translations$findLanguage,
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('ver_use'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('<<< Search'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, this_version, model)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Translations$main = _elm_lang$html$Html$program(
	{init: _user$project$Translations$init, update: _user$project$Translations$update, view: _user$project$Translations$view, subscriptions: _user$project$Translations$subscriptions})();
